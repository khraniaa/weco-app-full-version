{"version":3,"sources":["webpack:///./src/app/public/login/login.module.ts","webpack:///./src/app/public/login/login.page.html","webpack:///./src/app/public/login/login.page.scss","webpack:///./src/app/public/login/login.page.ts"],"names":[],"mappings":"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","file":"public-login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","module.exports = \"<!-- <ion-header>\\n  <ion-toolbar color=\\\"violett\\\">\\n    <ion-back-button defaultHref=\\\"/home\\\"></ion-back-button>\\n    <ion-title>Login</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n <ion-content padding style=\\\"background: none;\\\">\\n   <ion-item>\\n     <ion-label>Email</ion-label>\\n     <ion-input  type=\\\"email\\\" placeholder=\\\"Entrez votre E-mail\\\"></ion-input>\\n   </ion-item>\\n\\n   <ion-item>\\n     <ion-label>Password</ion-label>\\n     <ion-input  type=\\\"password\\\" placeholder=\\\"Entrez votre mot de passe\\\"></ion-input>\\n   </ion-item>\\n\\n   <ion-button routerLink=\\\"/profil\\\" expand=\\\"block\\\" >Login</ion-button>\\n   <ion-button  expand=\\\"block\\\" color=\\\"bleuclair\\\" href=\\\"/register\\\" routerDirection=\\\"forward\\\">Register</ion-button>\\n</ion-content>\\n-->\\n\\n<ion-header>\\n  <ion-toolbar color=\\\"violett\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/home\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Se connecter</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding style=\\\"background: none;\\\" class=\\\"form-content\\\">\\n <div style=\\\"text-align: center;\\\">\\n   <img src=\\\"/assets/img/logo.png\\\" style=\\\"height: 80px;\\\"/>\\n </div>\\n  <form class=\\\"form\\\" [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"tryLogin(validations_form.value)\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <ion-button color=\\\"violett\\\" class=\\\"submit-btn\\\" expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\"> Connexion</ion-button>\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\n  </form>\\n  <ion-button class=\\\"log-in-button\\\" color=\\\"primary\\\" expand=\\\"block\\\" (click)=\\\"doFbLogin()\\\">\\n      Connexion avec FACEBOOK\\n  </ion-button>\\n  <ion-button class=\\\"log-in-button\\\" color=\\\"danger\\\" expand=\\\"block\\\" (click)=\\\"doGoogleLogin()\\\">\\n      Connexion avec GOOGLE\\n  </ion-button>\\n  <p class=\\\"go-to-register\\\">\\n    Nouveau utilisateur? <a (click)=\\\"goRegisterPage()\\\">Cr√©er un compte.</a>\\n  </p>\\n</ion-content>\\n\"","module.exports = \".error-message {\\n  color: var(--ion-color-danger); }\\n\\n.go-to-register {\\n  text-align: center;\\n  margin-top: 20px; }\\n\\n.submit-btn {\\n  margin-top: 40px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3JhbmlhL21vbnByb2pldGlvbmljL3NyYy9hcHAvcHVibGljL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVFLDhCQUE4QixFQUFBOztBQUdoQztFQUVFLGtCQUFrQjtFQUNsQixnQkFBZ0IsRUFBQTs7QUFHbEI7RUFFRSxnQkFBZ0IsRUFBQSIsImZpbGUiOiJzcmMvYXBwL3B1YmxpYy9sb2dpbi9sb2dpbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogdmFyKC0taW9uLWNvbG9yLWRhbmdlcik7XG59XG5cbi5nby10by1yZWdpc3Rlclxue1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG59XG5cbi5zdWJtaXQtYnRuXG57XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59XG4iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormBuilder, FormGroup, FormControl } from '@angular/forms';\nimport { AuthService} from '../../services/authentication.service';\nimport {Router} from '@angular/router';\nimport {AlertController, LoadingController, Platform} from '@ionic/angular';\n// import { Router } from '@angular/router';\nimport { NativeStorage } from '@ionic-native/native-storage/ngx';\n import { GooglePlus } from '@ionic-native/google-plus/ngx';\nimport {environment} from '../../../environments/environment';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  validations_form: FormGroup;\n  errorMessage: string = '';\n\n  validation_messages = {\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' }\n    ]\n  };\n\n  constructor(\n      private authService: AuthService,\n      private formBuilder: FormBuilder,\n      private googlePlus: GooglePlus,\n      private nativeStorage: NativeStorage,\n      public loadingController: LoadingController,\n      private router: Router,\n      private platform: Platform,\n      public alertController: AlertController,\n\n  ) { }\n\n  ngOnInit() {\n    this.validations_form = this.formBuilder.group({\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required\n      ])),\n    });\n  }\n\n  tryLogin(value) {\n    this.authService.doLogin (value)\n        .then(res => {\n          // this.router.navigate(['/home']);\n          console.log('You are logged in.');\n          this.errorMessage = '';\n        }, err => {\n          this.errorMessage = err.message;\n          console.log(err);\n        });\n    // this.router.navigate(['/home']);\n  }\n\n  goRegisterPage() {\n    this.router.navigate(['/register']);\n  }\n\n    async doGoogleLogin() {\n        const loading = await this.loadingController.create({\n            message: 'Please wait...'\n        });\n        this.presentLoading(loading);\n        this.googlePlus.login({\n            'scopes': '', // optional - space-separated list of scopes, If not included or empty, defaults to `profile` and `email`.\n            'webClientId': environment.googleWebClientId, // optional - clientId of your Web application from Credentials settings of your project - On Android, this MUST be included to get an idToken. On iOS, it is not required.\n            'offline': true, // Optional, but requires the webClientId - if set to true the plugin will also return a serverAuthCode, which can be used to grant offline access to a non-Google server\n        })\n            .then(user => {\n                // save user data on the native storage\n                this.nativeStorage.setItem('google_user', {\n                    name: user.displayName,\n                    email: user.email,\n                    picture: user.imageUrl\n                })\n                    .then(() => {\n                        this.router.navigate(['/user']);\n                    }, (error) => {\n                        console.log(error);\n                    })\n                loading.dismiss();\n            }, err => {\n                console.log(err);\n                if(!this.platform.is('cordova')){\n                    this.presentAlert();\n                }\n                loading.dismiss();\n            })\n    }\n\n    async presentAlert() {\n        const alert = await this.alertController.create({\n            message: 'Cordova is not available on desktop. Please try this in a real device or in an emulator.',\n            buttons: ['OK']\n        });\n\n        await alert.present();\n    }\n\n\n    async presentLoading(loading) {\n        return await loading.present();\n    }\n}\n\n"],"sourceRoot":""}