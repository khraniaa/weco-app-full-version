var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var WebServer = /** @class */ (function (_super) {
    __extends(WebServer, _super);
    function WebServer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebServer.prototype.start = function (port) { return cordova(this, "start", { "callbackOrder": "reverse" }, arguments); };
    WebServer.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    WebServer.prototype.onRequest = function () { return cordova(this, "onRequest", { "callbackOrder": "reverse", "observable": true, "clearFunction": "stop" }, arguments); };
    WebServer.prototype.sendResponse = function (requestId, responseObject) { return cordova(this, "sendResponse", {}, arguments); };
    WebServer.pluginName = "WebServer";
    WebServer.plugin = "cordova-plugin-webserver";
    WebServer.pluginRef = "window.webserver";
    WebServer.repo = "https://github.com/bykof/cordova-plugin-webserver.git";
    WebServer.platforms = ["Android", "iOS"];
    WebServer = __decorate([
        Injectable()
    ], WebServer);
    return WebServer;
}(IonicNativePlugin));
export { WebServer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlYi1zZXJ2ZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE4REgsNkJBQWlCOzs7O0lBUzlDLHlCQUFLLGFBQUMsSUFBYTtJQVFuQix3QkFBSTtJQWFKLDZCQUFTO0lBV1QsZ0NBQVksYUFBQyxTQUFpQixFQUFFLGNBQXdCOzs7Ozs7SUF6QzdDLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUztvQkFoRXRCO0VBZ0UrQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIGJvZHk6IHN0cmluZztcbiAgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmd9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3Qge1xuICByZXF1ZXN0SWQ6IHN0cmluZztcbiAgYm9keTogc3RyaW5nO1xuICBoZWFkZXJzOiBzdHJpbmc7XG4gIG1ldGhvZDogJ1BPU1QnIHwgJ0dFVCcgfCAnUFVUJyB8ICdQQVRDSCcgfCAnREVMRVRFJztcbiAgcGF0aDogc3RyaW5nO1xuICBxdWVyeTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIFdlYiBTZXJ2ZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzdGFydCBhIGxvY2FsIGR5bmFtaWMgY29udGVudCB3ZWIgc2VydmVyIGZvciBhbmRyb2lkIGFuZCBpT1MgZGV2aWNlcy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFdlYlNlcnZlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvd2ViLXNlcnZlci9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHdlYlNlcnZlcjogV2ViU2VydmVyKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLndlYlNlcnZlci5vblJlcXVlc3QoKS5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICogICBjb25zdCByZXM6IFJlc3BvbnNlID0ge1xuICogICAgIHN0YXR1czogMjAwLFxuICogICAgIGJvZHk6ICcnLFxuICogICAgIGhlYWRlcnM6IHtcbiAqICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9odG1sJ1xuICogICAgIH1cbiAqICAgfTtcbiAqXG4gKiAgIHRoaXMud2ViU2VydmVyLnNlbmRSZXNwb25zZShkYXRhLnJlcXVlc3RJZCwgcmVzKVxuICogICAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICogfSk7XG4gKlxuICogdGhpcy53ZWJTZXJ2ZXIuc3RhcnQoODApXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBSZXNwb25zZVxuICogUmVxdWVzdFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1dlYlNlcnZlcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlYnNlcnZlcicsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy53ZWJzZXJ2ZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2J5a29mL2NvcmRvdmEtcGx1Z2luLXdlYnNlcnZlci5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWJTZXJ2ZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgc3RhcnQgeW91ciB3ZWJzZXJ2ZXIuXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IFBvcnQgbnVtYmVyIChkZWZhdWx0IHRvIDgwODApXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBzdGFydChwb3J0PzogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBzdG9wIHlvdXIgd2Vic2VydmVyLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHN0cmVhbXMgSFRUUCByZXF1ZXN0cyB0byBhbiBvYnNlcnZlci5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxSZXF1ZXN0Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHJlc29sdmUgYXMgYSBSZXF1ZXN0IG9iamVjdFxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyxcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wJ1xuICB9KVxuICBvblJlcXVlc3QoKTogT2JzZXJ2YWJsZTxSZXF1ZXN0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHNlbmRzIGEgcmVzcG9uc2UgdG8gYSByZXF1ZXN0LlxuICAgKiBAcGFyYW0gcmVxdWVzdElkIHtzdHJpbmd9IFJlcXVlc3QgSUQgdG8gcmVzcG9uZCB0b1xuICAgKiBAcGFyYW0gcmVzcG9uc2VPYmplY3Qge1Jlc3BvbnNlfSBSZXNwb25zZSBvYmplY3RcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gc29tZXRoaW5nIGhhcHBlbnNcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFJlc3BvbnNlKHJlcXVlc3RJZDogc3RyaW5nLCByZXNwb25zZU9iamVjdDogUmVzcG9uc2UpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG59XG4iXX0=